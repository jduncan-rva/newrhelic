# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# File Name : newrhelic
# Creation Date : 11-08-2013
# Created By : Jamie Duncan
# Last Modified : Sun 10 Nov 2013 10:03:51 PM EST
# Purpose : a simple daemon for the NewRHELic plugin

import time
import os
import sys

new_path = os.path.join(os.getcwd(),'NewRHELic/')
sys.path.append(new_path)

try:
    from daemon import runner
except ImportError:
    # Try loading daemon from 2.4 (EL5)
    sys.path.append('/usr/lib/python2.4/site-packages')
    from daemon import runner
    sys.path.remove('/usr/lib/python2.4/site-packages')

from newrhelic.newrhelic import NewRHELic

class RunApp:
    def __init__(self):
        self.data = NewRHELic()
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/var/run/newrhelic.pid'
        self.pidfile_timeout = 5
        self.files_preserve = self.getLogFileHandles(self.data.logger)

    def getLogFileHandles(self,logger):
        """ Get a list of filehandle numbers from logger
            to be handed to DaemonContext.files_preserve
        """
        handles = []
        for handler in logger.handlers:
            handles.append(handler.stream.fileno())
        if logger.parent:
            handles += self.getLogFileHandles(logger.parent)
        return handles

    def run(self):
        while True:
            self.data.add_to_newrelic()
            time.sleep(60)

class NewRHELicDaemonRunner(runner.DaemonRunner):
    """ Extend the basic DaemonRunnner with file_preserve """
    def __init__(self, app):
        super(NewRHELicDaemonRunner, self).__init__(app)
        app.data.logger.warning('Our Special Runner')
        self.daemon_context.files_preserve = app.files_preserve


app = RunApp()
daemon_runner = NewRHELicDaemonRunner(app)
daemon_runner.do_action()
